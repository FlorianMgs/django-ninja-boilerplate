"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import sys
import time
from pathlib import Path
from celery.schedules import crontab


# Fail fast on missing critical environment variables
def required_env(key, default=None):
    value = os.getenv(key, default)
    if value is None:
        raise ValueError(f"Missing required environment variable: {key}")
    return value


def optional_env(key, default=None, cast=str):
    value = os.getenv(key, default)
    if cast == bool:
        return value.lower() in ("true", "1", "yes", "on") if value else default
    elif cast == int:
        return int(value) if value else default
    return cast(value) if value else default


PROJECT_NAME = required_env("PROJECT_NAME")

# Build paths inside the project
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Add apps directory to Python path
sys.path.insert(0, str(BASE_DIR / "apps"))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = required_env("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = optional_env("DEBUG", False, bool)

ALLOWED_HOSTS = optional_env("ALLOWED_HOSTS", "localhost").split(",")

# Application definition
DJANGO_APPS = [
    "jazzmin",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

THIRD_PARTY_APPS = [
    "ninja",
    "channels",
    "django_celery_beat",
    "django_db_logger",
]

LOCAL_APPS = [
    "authentication",
    "example",
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"
ASGI_APPLICATION = "core.asgi.application"

# Database
import dj_database_url

DATABASES = {"default": dj_database_url.parse(required_env("DATABASE_URL"))}

# Custom User Model
AUTH_USER_MODEL = "authentication.User"

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Media files
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Redis Configuration
import redis

REDIS_URL = required_env("REDIS_URL")

# Channels Configuration
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [REDIS_URL],
            "capacity": 1000,
            "expiry": 60,
        },
    },
}

# Celery Configuration
CELERY_BROKER_URL = required_env("CELERY_BROKER_URL")
CELERY_RESULT_BACKEND = required_env("CELERY_RESULT_BACKEND")
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = TIME_ZONE
CELERY_ENABLE_UTC = True
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 300
CELERY_TASK_SOFT_TIME_LIMIT = 240
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_WORKER_MAX_TASKS_PER_CHILD = 1000

# Celery Beat Schedule
CELERY_BEAT_SCHEDULE = {
    "periodic-test-task": {
        "task": "example.tasks.periodic_test_task",
        "schedule": crontab(minute="*/5"),  # Every 5 minutes
    },
}

CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"

# Logging Configuration
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {asctime} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {"class": "logging.StreamHandler", "formatter": "verbose"},
        "db_log": {
            "level": "INFO",
            "class": "django_db_logger.db_log_handler.DatabaseLogHandler",
        },
    },
    "root": {
        "level": "INFO",
        "handlers": ["console"],
    },
    "loggers": {
        "django": {
            "handlers": ["console", "db_log"],
            "level": "INFO",
            "propagate": False,
        },
        "django.request": {
            "handlers": ["console", "db_log"],
            "level": "ERROR",
            "propagate": False,
        },
        "django.template": {
            "handlers": [],
            "level": "WARNING",
            "propagate": False,
        },
        "django.db.backends": {
            "handlers": [],
            "level": "WARNING",
            "propagate": False,
        },
        "celery": {
            "handlers": ["console", "db_log"],
            "level": "INFO",
            "propagate": False,
        },
        "db": {
            "handlers": ["db_log"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}

# Django Jazzmin Configuration
JAZZMIN_SETTINGS = {
    "site_title": f"{PROJECT_NAME} Admin",
    "site_header": PROJECT_NAME,
    "site_brand": PROJECT_NAME,
    "welcome_sign": f"Welcome to {PROJECT_NAME} Admin",
    "copyright": PROJECT_NAME,
    "search_model": "auth.User",
    "user_avatar": None,
    # Top Menu
    "topmenu_links": [
        {"name": "Home", "url": "admin:index", "permissions": ["auth.view_user"]},
        {"name": "API Docs", "url": "/api/docs", "new_window": True},
        {"name": "Flower", "url": "http://localhost:5555", "new_window": True},
    ],
    # User Menu
    "usermenu_links": [{"model": "auth.user"}],
    # Side Menu
    "show_sidebar": True,
    "navigation_expanded": True,
    "hide_apps": [],
    "hide_models": [],
    # UI Tweaks
    "related_modal_active": False,
    "custom_css": None,
    "custom_js": None,
    "use_google_fonts_cdn": True,
    "show_ui_builder": True,
    "changeform_format": "horizontal_tabs",
    "changeform_format_overrides": {
        "auth.user": "collapsible",
        "auth.group": "vertical_tabs",
    },
}

# Security Settings
SECURE_BROWSER_XSS_FILTER = optional_env("SECURE_BROWSER_XSS_FILTER", True, bool)
SECURE_CONTENT_TYPE_NOSNIFF = optional_env("SECURE_CONTENT_TYPE_NOSNIFF", True, bool)
X_FRAME_OPTIONS = optional_env("X_FRAME_OPTIONS", "DENY")
