version: '3.8'

x-env-file: &env-file
  - ../.env

services:
  postgres:
    image: postgres:16
    env_file: *env-file
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: django
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U django -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    env_file: *env-file
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  web:
    build: 
      context: ..
      dockerfile: ./docker/Dockerfile
    ports:
      - "8000:8000"
    env_file: *env-file
    volumes:
      - ../core:/app
      - ./entrypoint.sh:/entrypoint.sh
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    entrypoint: ["/entrypoint.sh"]
    command: ["daphne", "-b", "0.0.0.0", "-p", "8000", "core.asgi:application"]

  celery-worker-cpu:
    build: 
      context: ..
      dockerfile: ./docker/Dockerfile
    env_file: *env-file
    volumes:
      - ../core:/app
      - ./entrypoint.sh:/entrypoint.sh
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    entrypoint: ["/entrypoint.sh"]
    command: ["celery", "-A", "core", "worker", "-Q", "cpu_queue", "--loglevel=info", "--concurrency=${CELERY_CPU_WORKERS}", "--pool=prefork"]

  celery-worker-io:
    build: 
      context: ..
      dockerfile: ./docker/Dockerfile
    env_file: *env-file
    volumes:
      - ../core:/app
      - ./entrypoint.sh:/entrypoint.sh
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    entrypoint: ["/entrypoint.sh"]
    command: ["celery", "-A", "core", "worker", "-Q", "io_queue", "--loglevel=info", "--concurrency=${CELERY_IO_WORKERS}", "--pool=gevent"]

  celery-beat:
    build: 
      context: ..
      dockerfile: ./docker/Dockerfile
    env_file: *env-file
    volumes:
      - ../core:/app
      - ./entrypoint.sh:/entrypoint.sh
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    entrypoint: ["/entrypoint.sh"]
    command: ["celery", "-A", "core", "beat", "--scheduler", "django_celery_beat.schedulers:DatabaseScheduler", "--loglevel=info"]

  celery-flower:
    build: 
      context: ..
      dockerfile: ./docker/Dockerfile
    ports:
      - "5555:5555"
    env_file: *env-file
    volumes:
      - ../core:/app
      - ./entrypoint.sh:/entrypoint.sh
    depends_on:
      redis:
        condition: service_healthy
      celery-worker-cpu:
        condition: service_started
      celery-worker-io:
        condition: service_started
    restart: unless-stopped
    entrypoint: ["/entrypoint.sh"]
    command: ["celery", "-A", "core", "flower", "--port=5555", "--basic_auth=${ADMIN_USERNAME}:${ADMIN_PASSWORD}"]

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    driver: bridge 